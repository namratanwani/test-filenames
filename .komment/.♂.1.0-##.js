{"name":".♂.1.0-##.js","path":".♂.1.0-##.js","content":{"structured":{"description":"","items":[{"id":"51eb50d8-1296-4120-b7e3-19b61869df20","ancestors":[],"type":"function","name":"fibonacci","location":{"offset":" ","indent":0,"start":1,"insert":1},"code":"function fibonacci(num) {\n    if (num <= 1) return num;\n    return fibonacci(num - 1) + fibonacci(num - 2);\n}","params":[{"name":"num","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":4,"comment":{"description":"computes the nth Fibonacci number by recursively calling itself with arguments num - 1 and num - 2, and then adding the results together.","params":[{"name":"num","type":"number","value":null,"description":"0-based index of the Fibonacci sequence to be generated by the function."}],"returns":{"type":"`int`.","description":"a calculated Fibonacci sequence number.\n\n\t1. If `num` is less than or equal to 1, the function returns the direct value of `num`.\n\t2. Otherwise, the function calculates and returns the sum of `fibonacci(num - 1)` and `fibonacci(num - 2)`.\n"}}},{"id":"2dd796fd-9554-4bcc-9442-81d040bc3fbf","ancestors":[],"type":"function","name":"isPrime","location":{"offset":" ","indent":0,"start":6,"insert":6},"code":"function isPrime(num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 === 0 || num % 3 === 0) return false;\n    let i = 5;\n    while (i * i <= num) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n        i += 6;\n    }\n    return true;\n}","params":[{"name":"num","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":11,"comment":{"description":"checks whether a given number is prime by iteratively testing if it can be divided by any number less than its square root without leaving a remainder. If no division occurs, the number is prime.","params":[{"name":"num","type":"number","value":null,"description":""}],"returns":{"type":"boolean","description":"a boolean indicating whether the given number is prime."}}},{"id":"7392c432-d285-4990-b9b0-a8ecf574852b","ancestors":[],"type":"function","name":"factorial","location":{"offset":" ","indent":0,"start":18,"insert":18},"code":"function factorial(num) {\n    if (num === 0) return 1;\n    return num * factorial(num - 1);\n}","params":[{"name":"num","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":4,"comment":{"description":"calculates the factorial of a given integer `num`. It recursively calls itself until reaching the base case of `num = 0`, where it returns the result directly.","params":[{"name":"num","type":"integer","value":null,"description":"3-digit positive integer value that the function calculates the factorial of."}],"returns":{"type":"integer","description":"the value of the factorial of a given integer, calculated recursively."}}},{"id":"483bdf01-3226-4ca8-be74-e42904af5241","ancestors":[],"type":"function","name":"reverseString","location":{"offset":" ","indent":0,"start":23,"insert":23},"code":"function reverseString(str) {\n    return str.split(\"\").reverse().join(\"\");\n}","params":[{"name":"str","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":3,"comment":{"description":"takes a string as input and reverses its characters, joining them back into a string to produce the original text in reverse order.","params":[{"name":"str","type":"string","value":null,"description":"string to be reversed."}],"returns":{"type":"string","description":"a string that is the reverse of the input string."}}},{"id":"dbe14032-2816-490c-aaf4-80b01eec5e4e","ancestors":[],"type":"function","name":"mergeArrays","location":{"offset":" ","indent":0,"start":27,"insert":27},"code":"function mergeArrays(arr1, arr2) {\n    return [...arr1, ...arr2];\n}","params":[{"name":"arr1","value":null,"type":null},{"name":"arr2","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":3,"comment":{"description":"combines two input arrays into a single array by concatenating them using the spread operator ...","params":[{"name":"arr1","type":"array","value":null,"description":"1st array to be merged with the second array passed as `arr2`."},{"name":"arr2","type":"array","value":null,"description":"2nd array to be merged with the first array in the function `mergeArrays`."}],"returns":{"type":"array","description":"a new array that contains all elements from both input arrays concatenated together."}}},{"id":"05f68faf-bea3-49fd-b92d-603e55bc8e0b","ancestors":[],"type":"function","name":"bubbleSort","location":{"offset":" ","indent":0,"start":31,"insert":31},"code":"function bubbleSort(arr) {\n    const len = arr.length;\n    for (let i = 0; i < len; i++) {\n        for (let j = 0; j < len - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                const temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n    return arr;\n}","params":[{"name":"arr","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":13,"comment":{"description":"iterates through an array and compares adjacent elements, swapping them if they are out of order based on a greater-than comparison.","params":[{"name":"arr","type":"array","value":null,"description":"1D array to be sorted."}],"returns":{"type":"array","description":"a sorted array of numbers."}}},{"id":"72dd7518-5628-40c2-9595-5e2a32a396fd","ancestors":[],"type":"function","name":"constructor","location":{"offset":" ","indent":4,"start":46,"insert":46},"code":"constructor(name, species) {\n        this.name = name;\n        this.species = species;\n    }","params":[{"name":"name","value":null,"type":null},{"name":"species","value":null,"type":null}],"returns":false,"skip":false,"jsx":false,"length":4,"comment":{"description":"creates an object with two properties: `name` and `species`.","params":[{"name":"name","type":"string","value":null,"description":"name of the object being constructed."},{"name":"species","type":"string","value":null,"description":"animal's species."}],"returns":null}},{"id":"6d5d375e-4be2-4582-97c8-2030652fadc2","ancestors":[],"type":"function","name":"makeSound","location":{"offset":" ","indent":4,"start":50,"insert":50},"code":"makeSound() {\n        console.log(\"Animal sound\");\n    }","params":[],"returns":false,"skip":false,"jsx":false,"length":3,"comment":{"description":"outputs the message \"Animal sound\" to the console.","params":[],"returns":null}}]}}}