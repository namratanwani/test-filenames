{"name":".♂.1.0.js","path":".♂.1.0.js","content":{"structured":{"description":"","items":[{"id":"cca69d8a-21f4-47b0-88e1-6b242425e816","ancestors":[],"type":"function","name":"fibonacci","location":{"offset":" ","indent":0,"start":1,"insert":1},"code":"function fibonacci(num) {\n    if (num <= 1) return num;\n    return fibonacci(num - 1) + fibonacci(num - 2);\n}","params":[{"name":"num","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":4,"comment":{"description":"computes the nth Fibonacci number by recursion, using a base case of num <= 1 and recurrence relation fibonacci(num - 1) + fibonacci(num - 2).","params":[{"name":"num","type":"integer","value":null,"description":"0-based index of the Fibonacci number to be calculated, with values less than or equal to 1 resulting in the corresponding Fibonacci number being returned directly, and otherwise causing the function to recursively call itself to compute the previous two Fibonacci numbers and then sum them to produce the final result."}],"returns":{"type":"integer","description":"the nth Fibonacci number."}}},{"id":"9e43783c-d645-485e-9164-3b8c61640072","ancestors":[],"type":"function","name":"isPrime","location":{"offset":" ","indent":0,"start":6,"insert":6},"code":"function isPrime(num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 === 0 || num % 3 === 0) return false;\n    let i = 5;\n    while (i * i <= num) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n        i += 6;\n    }\n    return true;\n}","params":[{"name":"num","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":11,"comment":{"description":"checks whether a given number is prime by recursively iterating until finding a divisor or reaching the limit of the recursion. If no divisor is found, it returns true indicating the number is prime.","params":[{"name":"num","type":"integer","value":null,"description":"integer value that is being checked to see if it is prime."}],"returns":{"type":"boolean","description":"a boolean value indicating whether the input number is prime or not."}}},{"id":"76c438b1-38d3-41fc-9fbc-babe334b91b4","ancestors":[],"type":"function","name":"factorial","location":{"offset":" ","indent":0,"start":18,"insert":18},"code":"function factorial(num) {\n    if (num === 0) return 1;\n    return num * factorial(num - 1);\n}","params":[{"name":"num","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":4,"comment":{"description":"calculates the factorial of a given integer `num`. It recursively calls itself with the argument `num - 1` until it reaches the base case when `num = 0`, returning the result as `1`.","params":[{"name":"num","type":"integer","value":null,"description":"number that is being factored into its factorial value, and its value determines the calculation performed by the function."}],"returns":{"type":"integer","description":"the value of the given integer `num` factorialized."}}},{"id":"e1447ffb-2993-4e4f-aa01-bf07545087a8","ancestors":[],"type":"function","name":"reverseString","location":{"offset":" ","indent":0,"start":23,"insert":23},"code":"function reverseString(str) {\n    return str.split(\"\").reverse().join(\"\");\n}","params":[{"name":"str","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":3,"comment":{"description":"takes a string as input and returns its reversed version by splitting, reversing, and joining the characters back into a string.","params":[{"name":"str","type":"string","value":null,"description":"string to be reversed."}],"returns":{"type":"string","description":"a reversed string of the original input."}}},{"id":"f7bcac86-8676-47dc-a70c-df71fc254c00","ancestors":[],"type":"function","name":"mergeArrays","location":{"offset":" ","indent":0,"start":27,"insert":27},"code":"function mergeArrays(arr1, arr2) {\n    return [...arr1, ...arr2];\n}","params":[{"name":"arr1","value":null,"type":null},{"name":"arr2","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":3,"comment":{"description":"combines two arrays into a single array by concatenating its elements.","params":[{"name":"arr1","type":"array","value":null,"description":"1st array to be merged with the 2nd array."},{"name":"arr2","type":"array","value":null,"description":"2nd array to be merged with the first array in the function."}],"returns":{"type":"array","description":"a new array that contains the elements of both input arrays concatenated together."}}},{"id":"24c9a05c-1a07-476f-b839-24f437dc7bcf","ancestors":[],"type":"function","name":"bubbleSort","location":{"offset":" ","indent":0,"start":31,"insert":31},"code":"function bubbleSort(arr) {\n    const len = arr.length;\n    for (let i = 0; i < len; i++) {\n        for (let j = 0; j < len - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                const temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n    return arr;\n}","params":[{"name":"arr","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":13,"comment":{"description":"iterates through an array, comparing adjacent elements and swapping them if they are out of order based on their values.","params":[{"name":"arr","type":"array","value":null,"description":"2D array to be sorted."}],"returns":{"type":"array","description":"a sorted array of integers."}}},{"id":"f1e1b019-68b2-49e7-b65b-f1e6d6554587","ancestors":[],"type":"function","name":"constructor","location":{"offset":" ","indent":4,"start":46,"insert":46},"code":"constructor(name, species) {\n        this.name = name;\n        this.species = species;\n    }","params":[{"name":"name","value":null,"type":null},{"name":"species","value":null,"type":null}],"returns":false,"skip":false,"jsx":false,"length":4,"comment":{"description":"creates an instance of a class by assigning values to its properties 'name' and 'species'.","params":[{"name":"name","type":"string","value":null,"description":"name of the object being constructed and is assigned to the `name` field of the constructor."},{"name":"species","type":"string","value":null,"description":"species of the object being constructed in the constructor, providing a value that determines the object's type or class."}],"returns":null}},{"id":"cafb9e15-c0fb-4d08-bd50-8a41d96dcac9","ancestors":[],"type":"function","name":"makeSound","location":{"offset":" ","indent":4,"start":50,"insert":50},"code":"makeSound() {\n        console.log(\"Animal sound\");\n    }","params":[],"returns":false,"skip":false,"jsx":false,"length":3,"comment":{"description":"logs the string \"Animal sound\" to the console.","params":[],"returns":null}}]}}}