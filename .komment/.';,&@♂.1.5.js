{"name":".';,&@♂.1.5.js","path":".';,&@♂.1.5.js","content":{"structured":{"description":"","items":[{"id":"2ecda3e3-e7dd-4d7f-b7f7-2120f7dd5a02","ancestors":[],"type":"function","name":"fibonacci","location":{"offset":" ","indent":0,"start":1,"insert":1},"code":"function fibonacci(num) {\n    if (num <= 1) return num;\n    return fibonacci(num - 1) + fibonacci(num - 2);\n}","params":[{"name":"num","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":4,"comment":{"description":"computes the nth Fibonacci number by recursive application of the formula: `fibonacci(n) = fibonacci(n-1) + fibonacci(n-2)`.","params":[{"name":"num","type":"integer","value":null,"description":"0-based index of the Fibonacci number to be calculated by the function."}],"returns":{"type":"integer","description":"the nth Fibonacci number."}}},{"id":"b4492711-7ab9-4f0a-8303-02fec9ab2c70","ancestors":[],"type":"function","name":"isPrime","location":{"offset":" ","indent":0,"start":6,"insert":6},"code":"function isPrime(num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 === 0 || num % 3 === 0) return false;\n    let i = 5;\n    while (i * i <= num) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n        i += 6;\n    }\n    return true;\n}","params":[{"name":"num","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":11,"comment":{"description":"determines whether a given number is prime by iteratively testing if it has any factors other than 1 and itself. If none are found, it returns true.","params":[{"name":"num","type":"integer","value":null,"description":"3-digit integer to be tested for primality."}],"returns":{"type":"boolean","description":"a boolean value indicating whether the input number is prime or not."}}},{"id":"d3d26061-548e-40d0-81f2-4fc6b8c93311","ancestors":[],"type":"function","name":"factorial","location":{"offset":" ","indent":0,"start":18,"insert":18},"code":"function factorial(num) {\n    if (num === 0) return 1;\n    return num * factorial(num - 1);\n}","params":[{"name":"num","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":4,"comment":{"description":"calculates the factorial of a given number using recursive calculation.","params":[{"name":"num","type":"integer","value":null,"description":"integer value for which the factorial is calculated."}],"returns":{"type":"integer","description":"the value of `num!`, where `num` is a positive integer."}}},{"id":"4faeac4f-a1c3-48aa-a2f3-1f681fd6192e","ancestors":[],"type":"function","name":"reverseString","location":{"offset":" ","indent":0,"start":23,"insert":23},"code":"function reverseString(str) {\n    return str.split(\"\").reverse().join(\"\");\n}","params":[{"name":"str","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":3,"comment":{"description":"reverses a string by splitting it into individual characters, reversing their order, and rebuilding the original string using the reversed characters.","params":[{"name":"str","type":"string","value":null,"description":"string to be reversed."}],"returns":{"type":"string","description":"the string reversed character by character, joined back into a single string."}}},{"id":"c09c65fc-18e9-4b99-9af4-d97af7198263","ancestors":[],"type":"function","name":"mergeArrays","location":{"offset":" ","indent":0,"start":27,"insert":27},"code":"function mergeArrays(arr1, arr2) {\n    return [...arr1, ...arr2];\n}","params":[{"name":"arr1","value":null,"type":null},{"name":"arr2","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":3,"comment":{"description":"concatenates its two input arguments into a new array, returning the resulting list.","params":[{"name":"arr1","type":"array","value":null,"description":"1st array to be merged with the second array in the function."},{"name":"arr2","type":"array","value":null,"description":"2nd array to be merged with the first array in the function."}],"returns":{"type":"array","description":"a new array that combines the elements of both input arrays."}}},{"id":"c30720f5-354d-4d48-bac2-80a60984ae02","ancestors":[],"type":"function","name":"bubbleSort","location":{"offset":" ","indent":0,"start":31,"insert":31},"code":"function bubbleSort(arr) {\n    const len = arr.length;\n    for (let i = 0; i < len; i++) {\n        for (let j = 0; j < len - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                const temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n    return arr;\n}","params":[{"name":"arr","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":13,"comment":{"description":"iterates through an array, comparing adjacent elements and swapping them if the second is greater than the first. This process continues until no more swaps are needed. The function returns the sorted array.","params":[{"name":"arr","type":"array","value":null,"description":"1D array to be sorted by the bubble sort algorithm."}],"returns":{"type":"array","description":"a sorted array."}}},{"id":"d4cc67e5-e1f3-4828-8ebf-12eeac0fc3d4","ancestors":[],"type":"function","name":"constructor","location":{"offset":" ","indent":4,"start":46,"insert":46},"code":"constructor(name, species) {\n        this.name = name;\n        this.species = species;\n    }","params":[{"name":"name","value":null,"type":null},{"name":"species","value":null,"type":null}],"returns":false,"skip":false,"jsx":false,"length":4,"comment":{"description":"sets properties `name` and `species`.","params":[{"name":"name","type":"string","value":null,"description":"name of the object being constructed."},{"name":"species","type":"string","value":null,"description":"species of the object being constructed in the constructor, providing a value that is used to set the `species` property of the resulting object."}],"returns":null}},{"id":"0b6e7d05-a2e1-47f7-afde-881fb9b54176","ancestors":[],"type":"function","name":"makeSound","location":{"offset":" ","indent":4,"start":50,"insert":50},"code":"makeSound() {\n        console.log(\"Animal sound\");\n    }","params":[],"returns":false,"skip":false,"jsx":false,"length":3,"comment":{"description":"logs the string \"Animal sound\" to the console.","params":[],"returns":null}}]}}}