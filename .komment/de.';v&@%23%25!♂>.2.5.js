{"name":"de.';v&@%23%25!♂>.2.5.js","path":"de.';v&@%23%25!♂>.2.5.js","content":{"structured":{"description":"","items":[{"id":"421dc622-2137-4b44-a51e-59a03010725d","ancestors":[],"type":"function","name":"fibonacci","location":{"offset":" ","indent":0,"start":1,"insert":1},"code":"function fibonacci(num) {\n    if (num <= 1) return num;\n    return fibonacci(num - 1) + fibonacci(num - 2);\n}","params":[{"name":"num","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":4,"comment":{"description":"computes the nth Fibonacci number by recursively calling itself with arguments `num - 1` and `num - 2`.","params":[{"name":"num","type":"integer","value":null,"description":"0-based index of the Fibonacci sequence to compute, determining the corresponding value to return from the recursive function calls."}],"returns":{"type":"integer","description":"the nth Fibonacci number."}}},{"id":"062b58ac-4f16-4864-ab4a-5e5331a90d67","ancestors":[],"type":"function","name":"isPrime","location":{"offset":" ","indent":0,"start":6,"insert":6},"code":"function isPrime(num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 === 0 || num % 3 === 0) return false;\n    let i = 5;\n    while (i * i <= num) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n        i += 6;\n    }\n    return true;\n}","params":[{"name":"num","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":11,"comment":{"description":"verifies whether a given number is prime or not by checking if it is equal to 1, if it is less than 3, or if it is divisible by 2 or 3. If the number is not divisible by any of these factors, the function checks for divisibility by numbers between 5 and the square root of the input number using trial division.","params":[{"name":"num","type":"integer","value":null,"description":"4-digit positive integer for which the function checks if it is prime or not."}],"returns":{"type":"boolean","description":"a boolean value indicating whether the given number is prime."}}},{"id":"f6a3a209-1d14-4ebc-94eb-07397da05106","ancestors":[],"type":"function","name":"factorial","location":{"offset":" ","indent":0,"start":18,"insert":18},"code":"function factorial(num) {\n    if (num === 0) return 1;\n    return num * factorial(num - 1);\n}","params":[{"name":"num","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":4,"comment":{"description":"computes the factorial of a given number recursively, with base case handling zero values and recursive calculation for non-zero values.","params":[{"name":"num","type":"integer","value":null,"description":""}],"returns":{"type":"integer","description":"the factorial of the input number."}}},{"id":"c0199e73-8212-4854-9bf8-60fcc96d0243","ancestors":[],"type":"function","name":"reverseString","location":{"offset":" ","indent":0,"start":23,"insert":23},"code":"function reverseString(str) {\n    return str.split(\"\").reverse().join(\"\");\n}","params":[{"name":"str","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":3,"comment":{"description":"reverts a given string by splitting it into individual characters, reversing their order, and rebuilding the original string using the joined characters.","params":[{"name":"str","type":"string","value":null,"description":"string to be reversed."}],"returns":{"type":"string","description":"the original string reversed."}}},{"id":"68be3194-b291-4fe8-aef9-2d81afdb9333","ancestors":[],"type":"function","name":"mergeArrays","location":{"offset":" ","indent":0,"start":27,"insert":27},"code":"function mergeArrays(arr1, arr2) {\n    return [...arr1, ...arr2];\n}","params":[{"name":"arr1","value":null,"type":null},{"name":"arr2","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":3,"comment":{"description":"takes two arrays as input and returns a new array that is the concatenation of the elements of both arrays.","params":[{"name":"arr1","type":"array","value":null,"description":"first array that is being merged with the second array."},{"name":"arr2","type":"array","value":null,"description":"2nd array to be merged with the elements of `arr1`."}],"returns":{"type":"array","description":"a new array that combines the elements of both input arrays."}}},{"id":"504f535d-31bb-423b-88a2-0ad1c71ea2be","ancestors":[],"type":"function","name":"bubbleSort","location":{"offset":" ","indent":0,"start":31,"insert":31},"code":"function bubbleSort(arr) {\n    const len = arr.length;\n    for (let i = 0; i < len; i++) {\n        for (let j = 0; j < len - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                const temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n    return arr;\n}","params":[{"name":"arr","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":13,"comment":{"description":"iterates through an array and compares adjacent elements, swapping them if they are out of order based on their values.","params":[{"name":"arr","type":"array","value":null,"description":"2D array to be sorted."}],"returns":{"type":"array","description":"a sorted array of integers based on the provided input."}}},{"id":"dd8cfe13-177f-41f6-956f-a4364c4ddec6","ancestors":[],"type":"function","name":"constructor","location":{"offset":" ","indent":4,"start":46,"insert":46},"code":"constructor(name, species) {\n        this.name = name;\n        this.species = species;\n    }","params":[{"name":"name","value":null,"type":null},{"name":"species","value":null,"type":null}],"returns":false,"skip":false,"jsx":false,"length":4,"comment":{"description":"creates an object with name and species properties.","params":[{"name":"name","type":"string","value":null,"description":"name of the object being constructed."},{"name":"species","type":"string","value":null,"description":"species of the object being constructed in the `constructor` function, and is stored as a property of the object."}],"returns":null}},{"id":"3040c843-b824-44c3-932d-289e798751d6","ancestors":[],"type":"function","name":"makeSound","location":{"offset":" ","indent":4,"start":50,"insert":50},"code":"makeSound() {\n        console.log(\"Animal sound\");\n    }","params":[],"returns":false,"skip":false,"jsx":false,"length":3,"comment":{"description":"logs the string \"Animal sound\" to the console.","params":[],"returns":null}}]}}}