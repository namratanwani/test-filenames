{"name":".♂>.1.0.js","path":".♂>.1.0.js","content":{"structured":{"description":"","items":[{"id":"47941607-cac1-4a47-8404-5e22b23a6861","ancestors":[],"type":"function","name":"fibonacci","location":{"offset":" ","indent":0,"start":1,"insert":1},"code":"function fibonacci(num) {\n    if (num <= 1) return num;\n    return fibonacci(num - 1) + fibonacci(num - 2);\n}","params":[{"name":"num","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":4,"comment":{"description":"computes the nth Fibonacci number using a recursive approach, where the function calls itself with decreasing argument values until it reaches the base case of num <= 1, at which point it returns the value directly.","params":[{"name":"num","type":"integer","value":null,"description":"0-based index of the Fibonacci number to be generated by the function."}],"returns":{"type":"integer","description":"the nth Fibonacci number for a given input `num`."}}},{"id":"3b93db8e-6ea7-44fa-a6f4-161687e9213b","ancestors":[],"type":"function","name":"isPrime","location":{"offset":" ","indent":0,"start":6,"insert":6},"code":"function isPrime(num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 === 0 || num % 3 === 0) return false;\n    let i = 5;\n    while (i * i <= num) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n        i += 6;\n    }\n    return true;\n}","params":[{"name":"num","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":11,"comment":{"description":"determines whether a given number is prime or not by performing various checks, including checking for divisibility by 2 and 3, and using a trial division method to check for composite numbers.","params":[{"name":"num","type":"integer","value":null,"description":"2-digit integer to be tested for primality."}],"returns":{"type":"boolean","description":"a boolean value indicating whether the input number is prime or not."}}},{"id":"a3dbfe8a-4d40-4146-9ec8-ae5af615d2a4","ancestors":[],"type":"function","name":"factorial","location":{"offset":" ","indent":0,"start":18,"insert":18},"code":"function factorial(num) {\n    if (num === 0) return 1;\n    return num * factorial(num - 1);\n}","params":[{"name":"num","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":4,"comment":{"description":"computes the factorial of a given integer `num`. It recursively calls itself with `num - 1` as input until it reaches 0, at which point it returns 1.","params":[{"name":"num","type":"integer","value":null,"description":"for which the factorial is calculated, and its value determines the result returned by the function."}],"returns":{"type":"integer","description":"the value of the factorial of a given integer."}}},{"id":"a4211e40-4b76-42f3-82a7-a0b990dcf59a","ancestors":[],"type":"function","name":"reverseString","location":{"offset":" ","indent":0,"start":23,"insert":23},"code":"function reverseString(str) {\n    return str.split(\"\").reverse().join(\"\");\n}","params":[{"name":"str","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":3,"comment":{"description":"takes a string as input and reverses its characters, then joins them back into a string using the original delimiter.","params":[{"name":"str","type":"string","value":null,"description":"string to be reversed."}],"returns":{"type":"string","description":"a string that represents the original input string with its characters arranged in reverse order."}}},{"id":"59a92e1b-96a6-4858-ba2d-fd30e4fe312d","ancestors":[],"type":"function","name":"mergeArrays","location":{"offset":" ","indent":0,"start":27,"insert":27},"code":"function mergeArrays(arr1, arr2) {\n    return [...arr1, ...arr2];\n}","params":[{"name":"arr1","value":null,"type":null},{"name":"arr2","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":3,"comment":{"description":"combines two arrays by concatenating them into a single array using the spread operator ...","params":[{"name":"arr1","type":"array","value":null,"description":"1st array to be merged with the second array."},{"name":"arr2","type":"array","value":null,"description":"2nd array to be merged with the elements of `arr1`."}],"returns":{"type":"array","description":"a new array that contains all the elements of both input arrays concatenated together."}}},{"id":"17035be9-8953-463f-969c-fb4ed1fb3b0c","ancestors":[],"type":"function","name":"bubbleSort","location":{"offset":" ","indent":0,"start":31,"insert":31},"code":"function bubbleSort(arr) {\n    const len = arr.length;\n    for (let i = 0; i < len; i++) {\n        for (let j = 0; j < len - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                const temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n    return arr;\n}","params":[{"name":"arr","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":13,"comment":{"description":"iterates through an array, comparing adjacent elements and swapping them if they are out of order based on a comparison operator.","params":[{"name":"arr","type":"array","value":null,"description":"1D array that is being sorted by the bubble sort algorithm implemented in the function."}],"returns":{"type":"array","description":"a sorted array of numbers."}}},{"id":"48e137a7-b64e-453f-99f5-a221a5603a90","ancestors":[],"type":"function","name":"constructor","location":{"offset":" ","indent":4,"start":46,"insert":46},"code":"constructor(name, species) {\n        this.name = name;\n        this.species = species;\n    }","params":[{"name":"name","value":null,"type":null},{"name":"species","value":null,"type":null}],"returns":false,"skip":false,"jsx":false,"length":4,"comment":{"description":"initializes an object with the given `name` and `species`.","params":[{"name":"name","type":"string","value":null,"description":"name of the creature."},{"name":"species","type":"string","value":null,"description":"animal species of the object being constructed, and is used to determine the characteristics and behavior of the object in the code."}],"returns":null}},{"id":"68b3aa34-8776-461f-b266-e81ca3b14d20","ancestors":[],"type":"function","name":"makeSound","location":{"offset":" ","indent":4,"start":50,"insert":50},"code":"makeSound() {\n        console.log(\"Animal sound\");\n    }","params":[],"returns":false,"skip":false,"jsx":false,"length":3,"comment":{"description":"logs the message \"Animal sound\" to the console.","params":[],"returns":null}}]}}}