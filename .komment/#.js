{"name":"#.js","path":"#.js","content":{"structured":{"description":"","items":[{"id":"9957dfbb-99fc-4923-9ec9-bc4241985950","ancestors":[],"type":"function","name":"fibonacci","location":{"offset":" ","indent":0,"start":1,"insert":1},"code":"function fibonacci(num) {\n    if (num <= 1) return num;\n    return fibonacci(num - 1) + fibonacci(num - 2);\n    \n}","params":[{"name":"num","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":5,"comment":{"description":"calculates the nth Fibonacci number by recursively calling itself with arguments `num - 1` and `num - 2`.","params":[{"name":"num","type":"number","value":null,"description":"0-based index of the Fibonacci sequence to be generated by the function."}],"returns":{"type":"integer","description":"the Fibonacci sequence of a given number."}}},{"id":"42b7ba29-a4df-4ea4-bbb6-35cccf6ad6b1","ancestors":[],"type":"function","name":"isPrime","location":{"offset":" ","indent":0,"start":7,"insert":7},"code":"function isPrime(num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 === 0 || num % 3 === 0) return false;\n    let i = 5;\n    while (i * i <= num) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n        i += 6;\n    }\n    return true;\n}","params":[{"name":"num","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":11,"comment":{"description":"determines whether a given number is prime by iteratively checking if it is divisible by any integer from 2 to sqrt(num). If none are found, it returns true.","params":[{"name":"num","type":"integer","value":null,"description":"integer value that is being tested for primality using the provided algorithm."}],"returns":{"type":"boolean","description":"a boolean value indicating whether the input number is prime or not."}}},{"id":"287d790f-0930-4270-b3da-2c86586e9b3c","ancestors":[],"type":"function","name":"factorial","location":{"offset":" ","indent":0,"start":19,"insert":19},"code":"function factorial(num) {\n    if (num === 0) return 1;\n    return num * factorial(num - 1);\n}","params":[{"name":"num","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":4,"comment":{"description":"calculates the factorial of a given number using recursion.","params":[{"name":"num","type":"integer","value":null,"description":"number that is being factored, and it determines the value returned by the `factorial()` function."}],"returns":{"type":"integer","description":"the value of the factorial of a given integer, calculated recursively."}}},{"id":"d176948f-7ffd-4eb7-8d09-dda3366169dd","ancestors":[],"type":"function","name":"reverseString","location":{"offset":" ","indent":0,"start":24,"insert":24},"code":"function reverseString(str) {\n    return str.split(\"\").reverse().join(\"\");\n}","params":[{"name":"str","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":3,"comment":{"description":"reverses a given string by splitting it into individual characters, reversing their order, and rebuilding the string using the joined array of characters.","params":[{"name":"str","type":"string","value":null,"description":"string to be reversed."}],"returns":{"type":"string","description":"the original string reversed."}}},{"id":"1794ee13-f09f-45cc-abee-8d7dce68d812","ancestors":[],"type":"function","name":"mergeArrays","location":{"offset":" ","indent":0,"start":28,"insert":28},"code":"function mergeArrays(arr1, arr2) {\n    return [...arr1, ...arr2];\n}","params":[{"name":"arr1","value":null,"type":null},{"name":"arr2","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":3,"comment":{"description":"concatenates two arrays by spreading their elements into a new array using the `...` syntax.","params":[{"name":"arr1","type":"array","value":null,"description":"1st array that will be merged with the second array provided as input."},{"name":"arr2","type":"array","value":null,"description":"2nd array to be merged with the values of `arr1`."}],"returns":{"type":"array","description":"a concatenation of the elements of both input arrays."}}},{"id":"a17af524-766d-48e8-ac9e-c1294c29ddbb","ancestors":[],"type":"function","name":"bubbleSort","location":{"offset":" ","indent":0,"start":32,"insert":32},"code":"function bubbleSort(arr) {\n    const len = arr.length;\n    for (let i = 0; i < len; i++) {\n        for (let j = 0; j < len - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                const temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n    return arr;\n}","params":[{"name":"arr","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":13,"comment":{"description":"iterates through an array, compares adjacent elements, and swaps them if the second element is greater than the first. This process continues until no more swaps are needed. The function returns the sorted array.","params":[{"name":"arr","type":"array","value":null,"description":""}],"returns":{"type":"array","description":"a sorted array."}}},{"id":"3897483f-b915-482e-9756-4ea008213b10","ancestors":[],"type":"function","name":"constructor","location":{"offset":" ","indent":4,"start":47,"insert":47},"code":"constructor(name, species) {\n        this.name = name;\n        this.species = species;\n    }","params":[{"name":"name","value":null,"type":null},{"name":"species","value":null,"type":null}],"returns":false,"skip":false,"jsx":false,"length":4,"comment":{"description":"sets properties of a newly created object, including its name and species, based on input parameters.","params":[{"name":"name","type":"string","value":null,"description":"name of the creature."},{"name":"species","type":"string","value":null,"description":"species of the object being constructed and is assigned to the `species` property of the constructor object."}],"returns":null}},{"id":"b7c1354f-e8d5-48c3-b51e-eacdf1e9189f","ancestors":[],"type":"function","name":"makeSound","location":{"offset":" ","indent":4,"start":51,"insert":51},"code":"makeSound() {\n        console.log(\"Animal sound\");\n    }","params":[],"returns":false,"skip":false,"jsx":false,"length":3,"comment":{"description":"logs the message \"Animal sound\" to the console.","params":[],"returns":null}}]}}}