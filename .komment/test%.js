{"name":"test%.js","path":"test%.js","content":{"structured":{"description":"","items":[{"id":"1f0431f1-22cb-4804-8825-930ea158ef97","ancestors":[],"type":"function","name":"fibonacci","location":{"offset":" ","indent":0,"start":1,"insert":1},"code":"function fibonacci(num) {\r\n    if (num <= 1) return num;\r\n    return fibonacci(num - 1) + fibonacci(num - 2);\r\n}","params":[{"name":"num","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":4,"comment":{"description":"calculates the nth Fibonacci number by using a recursive approach, where the input number is passed as an argument to the function and the result is returned.","params":[{"name":"num","type":"integer","value":null,"description":"0-based index of the Fibonacci sequence to compute and determines the output value returned by the function."}],"returns":{"type":"integer","description":"the nth Fibonacci number for a given integer `num`."}}},{"id":"aaa05950-8b59-455e-bbf4-d383ef5aaf54","ancestors":[],"type":"function","name":"isPrime","location":{"offset":" ","indent":0,"start":6,"insert":6},"code":"function isPrime(num) {\r\n    if (num <= 1) return false;\r\n    if (num <= 3) return true;\r\n    if (num % 2 === 0 || num % 3 === 0) return false;\r\n    let i = 5;\r\n    while (i * i <= num) {\r\n        if (num % i === 0 || num % (i + 2) === 0) return false;\r\n        i += 6;\r\n    }\r\n    return true;\r\n}","params":[{"name":"num","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":11,"comment":{"description":"determines whether a given number is prime by recursively checking divisors up to and including the square root of the number, excluding 2 and 3, and then checking if it is even or has any factors other than 1 and itself.","params":[{"name":"num","type":"integer","value":null,"description":"number that is being tested for primality."}],"returns":{"type":"boolean","description":"a boolean value indicating whether the given number is prime or not."}}},{"id":"549e6058-88bb-4312-abd6-0550cdfaf992","ancestors":[],"type":"function","name":"factorial","location":{"offset":" ","indent":0,"start":18,"insert":18},"code":"function factorial(num) {\r\n    if (num === 0) return 1;\r\n    return num * factorial(num - 1);\r\n}","params":[{"name":"num","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":4,"comment":{"description":"calculates the value of a number's factorial, returning the result from 1 to infinity as input increases.","params":[{"name":"num","type":"integer","value":null,"description":"input value for which the factorial is calculated."}],"returns":{"type":"integer","description":"the value of the given number multiplied by its factorial recursively calculated until reaching the base case of `num === 0`."}}},{"id":"c1545110-14e9-4142-9610-a838173cb2b9","ancestors":[],"type":"function","name":"reverseString","location":{"offset":" ","indent":0,"start":23,"insert":23},"code":"function reverseString(str) {\r\n    return str.split(\"\").reverse().join(\"\");\r\n}","params":[{"name":"str","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":3,"comment":{"description":"takes a string as input, splits it into individual characters, reverses the order of those characters, and then reconstructs the original string by joining them together again.","params":[{"name":"str","type":"string","value":null,"description":"string to be reversed."}],"returns":{"type":"string","description":"a reversed string of the original input argument."}}},{"id":"2500791c-ab78-47e7-af67-1093ce8d3b0c","ancestors":[],"type":"function","name":"mergeArrays","location":{"offset":" ","indent":0,"start":27,"insert":27},"code":"function mergeArrays(arr1, arr2) {\r\n    return [...arr1, ...arr2];\r\n}","params":[{"name":"arr1","value":null,"type":null},{"name":"arr2","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":3,"comment":{"description":"takes two arrays as input and returns a new array with the elements of both arrays concatenated in a single list.","params":[{"name":"arr1","type":"array","value":null,"description":""},{"name":"arr2","type":"array","value":null,"description":"2nd array to be merged with `arr1`."}],"returns":{"type":"array","description":"a new array that combines the elements of both input arrays."}}},{"id":"a92cf49f-f53c-468d-9c8c-a62d710e19af","ancestors":[],"type":"function","name":"bubbleSort","location":{"offset":" ","indent":0,"start":31,"insert":31},"code":"function bubbleSort(arr) {\r\n    const len = arr.length;\r\n    for (let i = 0; i < len; i++) {\r\n        for (let j = 0; j < len - i - 1; j++) {\r\n            if (arr[j] > arr[j + 1]) {\r\n                const temp = arr[j];\r\n                arr[j] = arr[j + 1];\r\n                arr[j + 1] = temp;\r\n            }\r\n        }\r\n    }\r\n    return arr;\r\n}","params":[{"name":"arr","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":13,"comment":{"description":"sorts an array of integers by repeatedly comparing adjacent elements, swapping them if they are out of order based on their values.","params":[{"name":"arr","type":"array","value":null,"description":""}],"returns":{"type":"array","description":"a sorted array of integers."}}},{"id":"7ec96ad1-0906-427f-ba86-2a483eb4de4b","ancestors":[],"type":"function","name":"constructor","location":{"offset":" ","indent":4,"start":46,"insert":46},"code":"constructor(name, species) {\r\n        this.name = name;\r\n        this.species = species;\r\n    }","params":[{"name":"name","value":null,"type":null},{"name":"species","value":null,"type":null}],"returns":false,"skip":false,"jsx":false,"length":4,"comment":{"description":"creates an object with two properties: `name` and `species`.","params":[{"name":"name","type":"string","value":null,"description":"name of the object being constructed and is assigned to the `name` property of the object."},{"name":"species","type":"string","value":null,"description":"species of the object being constructed in the constructor function, and is used to assign the value of that parameter to the `species` property of the resulting object."}],"returns":null}},{"id":"a3d5f973-13d8-43bd-9a0b-66d4164ab027","ancestors":[],"type":"function","name":"makeSound","location":{"offset":" ","indent":4,"start":50,"insert":50},"code":"makeSound() {\r\n        console.log(\"Animal sound\");\r\n    }","params":[],"returns":false,"skip":false,"jsx":false,"length":3,"comment":{"description":"logs the string \"Animal sound\" to the console.","params":[],"returns":null}}]}}}