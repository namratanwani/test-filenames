{"name":"test%.js","path":"test%.js","content":{"structured":{"description":"","items":[{"id":"ea6d5058-bed8-438e-b908-8fd1e8436458","ancestors":[],"type":"function","name":"fibonacci","location":{"offset":" ","indent":0,"start":1,"insert":1},"code":"function fibonacci(num) {\r\n    if (num <= 1) return num;\r\n    return fibonacci(num - 1) + fibonacci(num - 2);\r\n}","params":[{"name":"num","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":4,"comment":{"description":"calculates the nth Fibonacci number by recursively calling itself with arguments `num - 1` and `num - 2`.","params":[{"name":"num","type":"number","value":null,"description":"0-based index of the Fibonacci sequence to be generated by the function."}],"returns":{"type":"integer","description":"a sequence of numbers that follows the Fibonacci sequence pattern."}}},{"id":"0b2a7813-2e4d-4b87-94db-b63e351e641c","ancestors":[],"type":"function","name":"isPrime","location":{"offset":" ","indent":0,"start":6,"insert":6},"code":"function isPrime(num) {\r\n    if (num <= 1) return false;\r\n    if (num <= 3) return true;\r\n    if (num % 2 === 0 || num % 3 === 0) return false;\r\n    let i = 5;\r\n    while (i * i <= num) {\r\n        if (num % i === 0 || num % (i + 2) === 0) return false;\r\n        i += 6;\r\n    }\r\n    return true;\r\n}","params":[{"name":"num","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":11,"comment":{"description":"tests whether a given number is prime by iteratively checking if it has any factors other than 1 and itself, and returning `true` if none are found.","params":[{"name":"num","type":"number","value":null,"description":"4-digit number being tested for primality."}],"returns":{"type":"boolean","description":"a boolean value indicating whether the input number is prime."}}},{"id":"c2549db4-fadf-46c1-b86d-b74e7baa1d43","ancestors":[],"type":"function","name":"factorial","location":{"offset":" ","indent":0,"start":18,"insert":18},"code":"function factorial(num) {\r\n    if (num === 0) return 1;\r\n    return num * factorial(num - 1);\r\n}","params":[{"name":"num","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":4,"comment":{"description":"calculates the factorial of a given integer `num`. It uses recursive calculation to determine the factorial, starting with the base case of `num = 0`, where the result is `1`. Otherwise, it multiplies `num` by the factorial of `num - 1`.","params":[{"name":"num","type":"integer","value":null,"description":"0-based integer value that is multiplied with its pre-decremented 1-based factorial to produce the result of the `factorial()` function."}],"returns":{"type":"integer","description":"the value of the factorial of a given integer `num`."}}},{"id":"b30c595c-8014-4711-b95a-7a4823b61a0d","ancestors":[],"type":"function","name":"reverseString","location":{"offset":" ","indent":0,"start":23,"insert":23},"code":"function reverseString(str) {\r\n    return str.split(\"\").reverse().join(\"\");\r\n}","params":[{"name":"str","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":3,"comment":{"description":"takes a string as input, splits it into individual characters, reverses the order of those characters, and then recombines them into a new string.","params":[{"name":"str","type":"string","value":null,"description":"string to be reversed."}],"returns":{"type":"string","description":"the string reversed without modifying it."}}},{"id":"140495c9-4ffc-492f-a336-b1e08c94d01f","ancestors":[],"type":"function","name":"mergeArrays","location":{"offset":" ","indent":0,"start":27,"insert":27},"code":"function mergeArrays(arr1, arr2) {\r\n    return [...arr1, ...arr2];\r\n}","params":[{"name":"arr1","value":null,"type":null},{"name":"arr2","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":3,"comment":{"description":"combines two arrays by concatenating them using the spread operator.","params":[{"name":"arr1","type":"array","value":null,"description":"1st array to be merged with `arr2`."},{"name":"arr2","type":"array","value":null,"description":"2nd array to be merged with the 1st array in the function `mergeArrays`."}],"returns":{"type":"array","description":"a concatenation of the elements of both input arrays."}}},{"id":"412466a1-18c9-45e5-9dbb-063c7b6fa914","ancestors":[],"type":"function","name":"bubbleSort","location":{"offset":" ","indent":0,"start":31,"insert":31},"code":"function bubbleSort(arr) {\r\n    const len = arr.length;\r\n    for (let i = 0; i < len; i++) {\r\n        for (let j = 0; j < len - i - 1; j++) {\r\n            if (arr[j] > arr[j + 1]) {\r\n                const temp = arr[j];\r\n                arr[j] = arr[j + 1];\r\n                arr[j + 1] = temp;\r\n            }\r\n        }\r\n    }\r\n    return arr;\r\n}","params":[{"name":"arr","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":13,"comment":{"description":"sorts an array of values by comparing adjacent elements and swapping them if they are out of order, repeating this process until no more swaps are needed.","params":[{"name":"arr","type":"array","value":null,"description":""}],"returns":{"type":"array","description":"a sorted array of numbers."}}},{"id":"e7f361ce-d8bc-4dc0-93d3-dcdffa9758a9","ancestors":[],"type":"function","name":"constructor","location":{"offset":" ","indent":4,"start":46,"insert":46},"code":"constructor(name, species) {\r\n        this.name = name;\r\n        this.species = species;\r\n    }","params":[{"name":"name","value":null,"type":null},{"name":"species","value":null,"type":null}],"returns":false,"skip":false,"jsx":false,"length":4,"comment":{"description":"defines an object's properties with two parameters: `name` and `species`.","params":[{"name":"name","type":"string","value":null,"description":"name of the creature."},{"name":"species","type":"string","value":null,"description":"animal's species to which the constructed object belongs."}],"returns":null}},{"id":"17296ca6-4df3-4eef-a552-435537354018","ancestors":[],"type":"function","name":"makeSound","location":{"offset":" ","indent":4,"start":50,"insert":50},"code":"makeSound() {\r\n        console.log(\"Animal sound\");\r\n    }","params":[],"returns":false,"skip":false,"jsx":false,"length":3,"comment":{"description":"logs the string \"Animal sound\" to the console.","params":[],"returns":null}}]}}}