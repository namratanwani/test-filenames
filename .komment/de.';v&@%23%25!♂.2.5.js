{"name":"de.';v&@%23%25!♂.2.5.js","path":"de.';v&@%23%25!♂.2.5.js","content":{"structured":{"description":"","items":[{"id":"c349b43f-fb35-44a5-acbc-6cfcade34f34","ancestors":[],"type":"function","name":"fibonacci","location":{"offset":" ","indent":0,"start":1,"insert":1},"code":"function fibonacci(num) {\n    if (num <= 1) return num;\n    return fibonacci(num - 1) + fibonacci(num - 2);\n}","params":[{"name":"num","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":4,"comment":{"description":"calculates the nth Fibonacci number by using a recursive approach, where the previous numbers are passed as arguments to the function.","params":[{"name":"num","type":"integer","value":null,"description":"0-based index of the Fibonacci sequence to compute, with values less than or equal to 1 returned directly and values greater than 1 computed as the sum of the previous two terms in the sequence."}],"returns":{"type":"integer","description":"the nth Fibonacci number."}}},{"id":"bbbddf35-1d16-48d7-b393-d7d60202d456","ancestors":[],"type":"function","name":"isPrime","location":{"offset":" ","indent":0,"start":6,"insert":6},"code":"function isPrime(num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 === 0 || num % 3 === 0) return false;\n    let i = 5;\n    while (i * i <= num) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n        i += 6;\n    }\n    return true;\n}","params":[{"name":"num","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":11,"comment":{"description":"determines whether a given number is prime or not by checking for divisibility by 2, 3, and other numbers up to the square root of the input number. If no factors are found, the number is returned as prime.","params":[{"name":"num","type":"number","value":null,"description":"4-digit number to be tested for primality."}],"returns":{"type":"boolean","description":"a boolean value indicating whether the input number is prime or not."}}},{"id":"ae0feda3-bd82-4569-ac97-d9bc15e100c3","ancestors":[],"type":"function","name":"factorial","location":{"offset":" ","indent":0,"start":18,"insert":18},"code":"function factorial(num) {\n    if (num === 0) return 1;\n    return num * factorial(num - 1);\n}","params":[{"name":"num","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":4,"comment":{"description":"computes the factorial of a given integer `num`. It uses recursion to calculate the factorial by multiplying the previous value by the next smaller integer until reaching 1 when `num` is 0.","params":[{"name":"num","type":"integer","value":null,"description":"for which the factorial is being calculated."}],"returns":{"type":"integer","description":"the value of the given number's factorial."}}},{"id":"4c1e4ebf-165b-4316-929a-9afb99813236","ancestors":[],"type":"function","name":"reverseString","location":{"offset":" ","indent":0,"start":23,"insert":23},"code":"function reverseString(str) {\n    return str.split(\"\").reverse().join(\"\");\n}","params":[{"name":"str","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":3,"comment":{"description":"takes a string as input and returns its reversed version by splitting it into individual characters, reversing them, and then joining them back into a string.","params":[{"name":"str","type":"string","value":null,"description":"string to be reversed."}],"returns":{"type":"string","description":"a reversed string of characters, with each character in the original string placed in reverse order."}}},{"id":"df143797-8fb0-4e8e-8f44-a2b2353ebbca","ancestors":[],"type":"function","name":"mergeArrays","location":{"offset":" ","indent":0,"start":27,"insert":27},"code":"function mergeArrays(arr1, arr2) {\n    return [...arr1, ...arr2];\n}","params":[{"name":"arr1","value":null,"type":null},{"name":"arr2","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":3,"comment":{"description":"combines two arrays by returning a new array that contains all elements from both input arrays, in the order they were provided.","params":[{"name":"arr1","type":"array","value":null,"description":"1st array to be merged with the second array in the function."},{"name":"arr2","type":"array","value":null,"description":"2nd array to be merged with the elements of `arr1`."}],"returns":{"type":"array","description":"a new array that combines the elements of both input arrays."}}},{"id":"0aa04b05-499c-48fb-ab39-4342cff9ec78","ancestors":[],"type":"function","name":"bubbleSort","location":{"offset":" ","indent":0,"start":31,"insert":31},"code":"function bubbleSort(arr) {\n    const len = arr.length;\n    for (let i = 0; i < len; i++) {\n        for (let j = 0; j < len - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                const temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n    return arr;\n}","params":[{"name":"arr","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":13,"comment":{"description":"iteratively sorts an array by comparing adjacent elements and swapping them if they are out of order, repeating the process until no more swaps are needed.","params":[{"name":"arr","type":"array","value":null,"description":"2D array that is to be sorted by the `bubbleSort()` function."}],"returns":{"type":"array","description":"a sorted array of elements."}}},{"id":"d2f2bb79-f135-4317-b8f0-dd72b025e780","ancestors":[],"type":"function","name":"constructor","location":{"offset":" ","indent":4,"start":46,"insert":46},"code":"constructor(name, species) {\n        this.name = name;\n        this.species = species;\n    }","params":[{"name":"name","value":null,"type":null},{"name":"species","value":null,"type":null}],"returns":false,"skip":false,"jsx":false,"length":4,"comment":{"description":"creates an object with two properties: `name` and `species`.","params":[{"name":"name","type":"string","value":null,"description":"name of the object being constructed."},{"name":"species","type":"string","value":null,"description":"species of the object being constructed in the constructor, and is used to assign the appropriate value to the `species` property of the resulting object."}],"returns":null}},{"id":"a7d5a71e-8a03-4643-9beb-2ce99f5faafe","ancestors":[],"type":"function","name":"makeSound","location":{"offset":" ","indent":4,"start":50,"insert":50},"code":"makeSound() {\n        console.log(\"Animal sound\");\n    }","params":[],"returns":false,"skip":false,"jsx":false,"length":3,"comment":{"description":"logs an animal sound to the console.","params":[],"returns":null}}]}}}