{"name":"de.';v&@%23%25!♂>>.2.5.js","path":"de.';v&@%23%25!♂>>.2.5.js","content":{"structured":{"description":"","items":[{"id":"a9b6228b-472b-4678-aa87-6ac7b7af5e3d","ancestors":[],"type":"function","name":"fibonacci","location":{"offset":" ","indent":0,"start":1,"insert":1},"code":"function fibonacci(num) {\n    if (num <= 1) return num;\n    return fibonacci(num - 1) + fibonacci(num - 2);\n}","params":[{"name":"num","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":4,"comment":{"description":"computes the nth Fibonacci number by recursively calling itself with arguments num - 1 and num - 2, and then combining their results.","params":[{"name":"num","type":"integer","value":null,"description":"0-based index of the Fibonacci number to be computed."}],"returns":{"type":"integer","description":"the nth Fibonacci number."}}},{"id":"89923d73-db70-4638-94fe-bf24c1460169","ancestors":[],"type":"function","name":"isPrime","location":{"offset":" ","indent":0,"start":6,"insert":6},"code":"function isPrime(num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 === 0 || num % 3 === 0) return false;\n    let i = 5;\n    while (i * i <= num) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n        i += 6;\n    }\n    return true;\n}","params":[{"name":"num","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":11,"comment":{"description":"determines whether a given number is prime or not by checking for divisibility by 2, 3, and any other integer between 5 and the square root of the number. If none of these conditions are met, the number is considered prime.","params":[{"name":"num","type":"integer","value":null,"description":"3-digit number to be checked for primality."}],"returns":{"type":"boolean","description":"a boolean value indicating whether the input number is prime or not."}}},{"id":"4ff91f72-3faa-4254-963e-522f0571bac1","ancestors":[],"type":"function","name":"factorial","location":{"offset":" ","indent":0,"start":18,"insert":18},"code":"function factorial(num) {\n    if (num === 0) return 1;\n    return num * factorial(num - 1);\n}","params":[{"name":"num","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":4,"comment":{"description":"calculates the factorial of a given number using recursion, returning the result as a product of the input number and the recursorily calculated factorial of the input minus one.","params":[{"name":"num","type":"integer","value":null,"description":"integer value that is being factored, and it determines the result of the computation performed by the `factorial` function."}],"returns":{"type":"integer","description":"the value of the given number raised to the power of its factorial."}}},{"id":"2350968d-4c55-4a5b-9632-9a084e267668","ancestors":[],"type":"function","name":"reverseString","location":{"offset":" ","indent":0,"start":23,"insert":23},"code":"function reverseString(str) {\n    return str.split(\"\").reverse().join(\"\");\n}","params":[{"name":"str","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":3,"comment":{"description":"reverses a given string by splitting it into individual characters, reversing their order, and reconstructing the string back to its original form.","params":[{"name":"str","type":"string","value":null,"description":"string to be reversed."}],"returns":{"type":"string","description":"the original string reversed."}}},{"id":"e40132a4-b5e1-44fb-aa2e-4ec5e6935210","ancestors":[],"type":"function","name":"mergeArrays","location":{"offset":" ","indent":0,"start":27,"insert":27},"code":"function mergeArrays(arr1, arr2) {\n    return [...arr1, ...arr2];\n}","params":[{"name":"arr1","value":null,"type":null},{"name":"arr2","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":3,"comment":{"description":"concatenates two arrays by returning a new array that contains all elements from both input arrays.","params":[{"name":"arr1","type":"array","value":null,"description":"1st array to be merged with the 2nd array."},{"name":"arr2","type":"array","value":null,"description":"2nd array to be merged with the elements of `arr1`."}],"returns":{"type":"array","description":"a new array that combines the elements of both input arrays in a single list."}}},{"id":"2d7f4f10-3351-4151-aef9-dba24196e8ab","ancestors":[],"type":"function","name":"bubbleSort","location":{"offset":" ","indent":0,"start":31,"insert":31},"code":"function bubbleSort(arr) {\n    const len = arr.length;\n    for (let i = 0; i < len; i++) {\n        for (let j = 0; j < len - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                const temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n    return arr;\n}","params":[{"name":"arr","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":13,"comment":{"description":"iterates through an array and performs a bubble sort by swapping adjacent elements if they are out of order.","params":[{"name":"arr","type":"array","value":null,"description":"2D array that is being sorted using the bubble sort algorithm."}],"returns":{"type":"array","description":"a sorted array of integers based on the provided input."}}},{"id":"4c8c2ef7-66ca-4f40-8d48-61684b6a38f8","ancestors":[],"type":"function","name":"constructor","location":{"offset":" ","indent":4,"start":46,"insert":46},"code":"constructor(name, species) {\n        this.name = name;\n        this.species = species;\n    }","params":[{"name":"name","value":null,"type":null},{"name":"species","value":null,"type":null}],"returns":false,"skip":false,"jsx":false,"length":4,"comment":{"description":"creates an instance of a class by setting its properties 'name' and 'species'.","params":[{"name":"name","type":"string","value":null,"description":"name of the object being constructed and is assigned to the `name` field of the constructor."},{"name":"species","type":"string","value":null,"description":"species of the object being constructed in the constructor, and assigns it to the `species` field of the object."}],"returns":null}},{"id":"b2c8c4a7-9d32-4669-8353-1ed70468344d","ancestors":[],"type":"function","name":"makeSound","location":{"offset":" ","indent":4,"start":50,"insert":50},"code":"makeSound() {\n        console.log(\"Animal sound\");\n    }","params":[],"returns":false,"skip":false,"jsx":false,"length":3,"comment":{"description":"logs the message \"Animal sound\" to the console.","params":[],"returns":null}}]}}}