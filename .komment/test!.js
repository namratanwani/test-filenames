{"name":"test!.js","path":"test!.js","content":{"structured":{"description":"","items":[{"id":"478dbeb6-7e7d-48fa-b600-36abab369b43","ancestors":[],"type":"function","name":"fibonacci","location":{"offset":" ","indent":0,"start":1,"insert":1},"code":"function fibonacci(num) {\r\n    if (num <= 1) return num;\r\n    return fibonacci(num - 1) + fibonacci(num - 2);\r\n}","params":[{"name":"num","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":4,"comment":{"description":"calculates the nth Fibonacci number given its argument `num`. It uses a recursive approach where the function calls itself with smaller arguments until it reaches the base case of `num <= 1`, at which point it returns the value directly.","params":[{"name":"num","type":"integer","value":null,"description":"0-based index of the Fibonacci sequence to generate."}],"returns":{"type":"integer","description":"the nth Fibonacci number, where `n` is the input parameter."}}},{"id":"7c86134b-bd1a-4f36-9735-19b6f7b200b2","ancestors":[],"type":"function","name":"isPrime","location":{"offset":" ","indent":0,"start":6,"insert":6},"code":"function isPrime(num) {\r\n    if (num <= 1) return false;\r\n    if (num <= 3) return true;\r\n    if (num % 2 === 0 || num % 3 === 0) return false;\r\n    let i = 5;\r\n    while (i * i <= num) {\r\n        if (num % i === 0 || num % (i + 2) === 0) return false;\r\n        i += 6;\r\n    }\r\n    return true;\r\n}","params":[{"name":"num","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":11,"comment":{"description":"determines whether a given number is prime or not. It checks the number for divisibility by 2 and 3, and then uses a trial division approach to check for primality based on factors of 5 and its multiples.","params":[{"name":"num","type":"integer","value":null,"description":"2-digit positive integer for which the function checks if it is prime or not."}],"returns":{"type":"boolean","description":"a boolean value indicating whether the input number is prime or not."}}},{"id":"d1fb6642-4303-4082-a28b-a3e2e2b697ad","ancestors":[],"type":"function","name":"factorial","location":{"offset":" ","indent":0,"start":18,"insert":18},"code":"function factorial(num) {\r\n    if (num === 0) return 1;\r\n    return num * factorial(num - 1);\r\n}","params":[{"name":"num","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":4,"comment":{"description":"calculates the factorial of a given number recursively, with base case of 0 returning 1 and otherwise returning the product of the current number and the factorial of its predecessor.","params":[{"name":"num","type":"integer","value":null,"description":"value of the factorial function being calculated, which determines the recursive calculation performed by the function."}],"returns":{"type":"integer","description":"the value of `num!`."}}},{"id":"11b10da2-4fb4-41b3-b694-15023e4cd271","ancestors":[],"type":"function","name":"reverseString","location":{"offset":" ","indent":0,"start":23,"insert":23},"code":"function reverseString(str) {\r\n    return str.split(\"\").reverse().join(\"\");\r\n}","params":[{"name":"str","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":3,"comment":{"description":"takes a string as input and returns its reverse by splitting it into individual characters, reversing them, and joining them back into a string.","params":[{"name":"str","type":"string","value":null,"description":"string to be reversed."}],"returns":{"type":"string","description":"the original string reversed."}}},{"id":"9d900557-7228-4f39-8ef3-ed726346c3b5","ancestors":[],"type":"function","name":"mergeArrays","location":{"offset":" ","indent":0,"start":27,"insert":27},"code":"function mergeArrays(arr1, arr2) {\r\n    return [...arr1, ...arr2];\r\n}","params":[{"name":"arr1","value":null,"type":null},{"name":"arr2","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":3,"comment":{"description":"combines two input arrays into a single array by concatenating them using the spread operator ... .","params":[{"name":"arr1","type":"array","value":null,"description":"1st array that will be merged with the 2nd array."},{"name":"arr2","type":"array","value":null,"description":"2nd array to be merged with the elements of `arr1`."}],"returns":{"type":"array","description":"a new array that combines the elements of both input arrays in a single array."}}},{"id":"aa7f464c-e832-4a2a-b949-d72454f43fd9","ancestors":[],"type":"function","name":"bubbleSort","location":{"offset":" ","indent":0,"start":31,"insert":31},"code":"function bubbleSort(arr) {\r\n    const len = arr.length;\r\n    for (let i = 0; i < len; i++) {\r\n        for (let j = 0; j < len - i - 1; j++) {\r\n            if (arr[j] > arr[j + 1]) {\r\n                const temp = arr[j];\r\n                arr[j] = arr[j + 1];\r\n                arr[j + 1] = temp;\r\n            }\r\n        }\r\n    }\r\n    return arr;\r\n}","params":[{"name":"arr","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":13,"comment":{"description":"iterates through an array, comparing adjacent elements and swapping them if they are out of order. It repeats this process until no more swaps are needed.","params":[{"name":"arr","type":"array","value":null,"description":""}],"returns":{"type":"array","description":"a sorted array of integers."}}},{"id":"ad8c89bb-f19c-4616-9a3b-b0d7298fdcf0","ancestors":[],"type":"function","name":"constructor","location":{"offset":" ","indent":4,"start":46,"insert":46},"code":"constructor(name, species) {\r\n        this.name = name;\r\n        this.species = species;\r\n    }","params":[{"name":"name","value":null,"type":null},{"name":"species","value":null,"type":null}],"returns":false,"skip":false,"jsx":false,"length":4,"comment":{"description":"creates an instance of a class by assigning values to its properties `name` and `species`.","params":[{"name":"name","type":"string","value":null,"description":"name of the object being constructed and is assigned to the `name` field of the object instance."},{"name":"species","type":"string","value":null,"description":"species of an object, which is then assigned to the `species` property of the constructed object."}],"returns":null}},{"id":"c75cb2eb-7cfa-4249-a6ba-f26d6708cdcb","ancestors":[],"type":"function","name":"makeSound","location":{"offset":" ","indent":4,"start":50,"insert":50},"code":"makeSound() {\r\n        console.log(\"Animal sound\");\r\n    }","params":[],"returns":false,"skip":false,"jsx":false,"length":3,"comment":{"description":"logs the string \"Animal sound\" to the console.","params":[],"returns":null}}]}}}