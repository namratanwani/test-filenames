{"name":".';,&@♂>.1.5.js","path":".';,&@♂>.1.5.js","content":{"structured":{"description":"","items":[{"id":"0c4e1ae9-85c0-4bba-815e-9946e7e3c4f1","ancestors":[],"type":"function","name":"fibonacci","location":{"offset":" ","indent":0,"start":1,"insert":1},"code":"function fibonacci(num) {\n    if (num <= 1) return num;\n    return fibonacci(num - 1) + fibonacci(num - 2);\n}","params":[{"name":"num","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":4,"comment":{"description":"calculates the nth Fibonacci number given its argument `num`. It uses a recursive approach where the function calls itself with arguments `num - 1` and `num - 2` to compute the desired value.","params":[{"name":"num","type":"integer","value":null,"description":"0-based index of the Fibonacci sequence to be generated by the function."}],"returns":{"type":"integer","description":"the nth Fibonacci number."}}},{"id":"e424daa1-405d-40e9-88e8-8523c6de469d","ancestors":[],"type":"function","name":"isPrime","location":{"offset":" ","indent":0,"start":6,"insert":6},"code":"function isPrime(num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 === 0 || num % 3 === 0) return false;\n    let i = 5;\n    while (i * i <= num) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n        i += 6;\n    }\n    return true;\n}","params":[{"name":"num","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":11,"comment":{"description":"checks whether a given number is prime by iteratively testing if it can be divided by any integer from 2 to 6 without leaving a remainder. If such a divisor is found, the function returns false; otherwise, it returns true.","params":[{"name":"num","type":"integer","value":null,"description":"3-digit number to be checked for primality."}],"returns":{"type":"boolean","description":"a boolean value indicating whether the input number is prime or not."}}},{"id":"ebe6f505-987f-425c-ae53-3a7420e351d8","ancestors":[],"type":"function","name":"factorial","location":{"offset":" ","indent":0,"start":18,"insert":18},"code":"function factorial(num) {\n    if (num === 0) return 1;\n    return num * factorial(num - 1);\n}","params":[{"name":"num","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":4,"comment":{"description":"calculates the factorial of a given number recursively by multiplying the result of the previous call with the input number minus 1.","params":[{"name":"num","type":"integer","value":null,"description":"base value for calculation of its factorial, with `0` being a special case where the result is fixed at 1."}],"returns":{"type":"integer","description":"the value of the given integer argument multiplied by the factorial of the argument minus 1."}}},{"id":"bd40ef6e-16a4-400b-86b8-4fb61b798e83","ancestors":[],"type":"function","name":"reverseString","location":{"offset":" ","indent":0,"start":23,"insert":23},"code":"function reverseString(str) {\n    return str.split(\"\").reverse().join(\"\");\n}","params":[{"name":"str","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":3,"comment":{"description":"takes a string as input, splits it into individual characters, reverses their order, and joins them back into a string.","params":[{"name":"str","type":"string","value":null,"description":"string to be reversed."}],"returns":{"type":"string","description":"a string with the characters of the input string reversed."}}},{"id":"0dc804c8-b4c6-4ecc-a6a5-69786dda3f17","ancestors":[],"type":"function","name":"mergeArrays","location":{"offset":" ","indent":0,"start":27,"insert":27},"code":"function mergeArrays(arr1, arr2) {\n    return [...arr1, ...arr2];\n}","params":[{"name":"arr1","value":null,"type":null},{"name":"arr2","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":3,"comment":{"description":"combines two arrays into a single array by concatenating its elements.","params":[{"name":"arr1","type":"array","value":null,"description":"1st array to be merged with the second array."},{"name":"arr2","type":"array","value":null,"description":"2nd array to be merged with the first array in the function."}],"returns":{"type":"array","description":"a concatenation of `arr1` and `arr2`."}}},{"id":"af0cfd03-a992-46ea-9fda-f6cd503fa979","ancestors":[],"type":"function","name":"bubbleSort","location":{"offset":" ","indent":0,"start":31,"insert":31},"code":"function bubbleSort(arr) {\n    const len = arr.length;\n    for (let i = 0; i < len; i++) {\n        for (let j = 0; j < len - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                const temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n    return arr;\n}","params":[{"name":"arr","value":null,"type":null}],"returns":true,"skip":false,"jsx":false,"length":13,"comment":{"description":"iteratively compares adjacent elements of an array, swapping them if they are out of order based on their values.","params":[{"name":"arr","type":"array","value":null,"description":"array that is being sorted by the `bubbleSort()` function."}],"returns":{"type":"array","description":"a sorted array."}}},{"id":"87a4f9b2-03ee-4201-9b1a-99fc88f6e5a7","ancestors":[],"type":"function","name":"constructor","location":{"offset":" ","indent":4,"start":46,"insert":46},"code":"constructor(name, species) {\n        this.name = name;\n        this.species = species;\n    }","params":[{"name":"name","value":null,"type":null},{"name":"species","value":null,"type":null}],"returns":false,"skip":false,"jsx":false,"length":4,"comment":{"description":"establishes an object's properties based on user input, including name and species, thus allowing for object initialization with relevant data.","params":[{"name":"name","type":"string","value":null,"description":"name of the entity for which the constructor is being called, and it is assigned to the `this.name` attribute within the constructor function."},{"name":"species","type":"string","value":null,"description":"animal's species in the constructor function of the `Animal` class."}],"returns":null}},{"id":"164f11be-e000-418a-a236-cda210dfc09b","ancestors":[],"type":"function","name":"makeSound","location":{"offset":" ","indent":4,"start":50,"insert":50},"code":"makeSound() {\n        console.log(\"Animal sound\");\n    }","params":[],"returns":false,"skip":false,"jsx":false,"length":3,"comment":{"description":"consoles logs the string \"Animal sound\".","params":[],"returns":null}}]}}}